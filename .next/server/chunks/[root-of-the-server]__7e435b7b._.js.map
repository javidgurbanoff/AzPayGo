{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/lib/mongoose.ts"],"sourcesContent":["// lib/mongoose.ts\r\nimport mongoose from \"mongoose\";\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"Please define MONGODB_URI in your .env file\");\r\n}\r\n\r\nlet isConnected = false;\r\n\r\nexport const connectDB = async () => {\r\n  if (isConnected) return;\r\n\r\n  try {\r\n    await mongoose.connect(MONGODB_URI);\r\n    isConnected = true;\r\n    console.log(\"✅ MongoDB connected\");\r\n  } catch (error) {\r\n    console.error(\"❌ MongoDB connection error:\", error);\r\n    throw error;\r\n  }\r\n};\r\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;AAClB;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,cAAc;AAEX,MAAM,YAAY;IACvB,IAAI,aAAa;IAEjB,IAAI;QACF,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC;QACvB,cAAc;QACd,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM;IACR;AACF","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/app/models/User.ts"],"sourcesContent":["// models/User.ts\r\nimport mongoose, { Schema, Document } from \"mongoose\";\r\n\r\nexport interface IUser extends Document {\r\n  email: string;\r\n  name: string;\r\n  password: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>(\r\n  {\r\n    email: { type: String, required: true, unique: true },\r\n    name: { type: String, required: true },\r\n    password: { type: String, required: true },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Avoid model overwrite issue in Next.js hot-reload\r\nexport const User = mongoose.models.User || mongoose.model<IUser>(\"User\", UserSchema);\r\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;AACjB;;AAUA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAC3B;IACE,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC3C,GACA;IAAE,YAAY;AAAK;AAId,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/app/api/auth/login/route.ts"],"sourcesContent":["// app/api/auth/login/route.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { connectDB } from \"@/lib/mongoose\";\r\nimport { User } from \"@/app/models/User\";\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"change_this_in_prod\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    await connectDB(); // connect to MongoDB\r\n\r\n    const { email, password } = await req.json();\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json(\r\n        { error: \"Email and password required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // find user by email\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid credentials\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // compare hashed passwords\r\n    const isValid = await bcrypt.compare(password, user.password);\r\n    if (!isValid) {\r\n      return NextResponse.json(\r\n        { error: \"Invalid credentials\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    // create JWT token\r\n    const payload = { userId: user._id.toString(), email: user.email };\r\n    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: \"1h\" });\r\n\r\n    // return token + user data (no password)\r\n    return NextResponse.json({\r\n      token,\r\n      user: {\r\n        id: user._id.toString(),\r\n        email: user.email,\r\n        name: user.name,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Login error:\", err);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;AACA;AACA;AACA;AACA;;;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,CAAA,GAAA,iHAAA,CAAA,YAAS,AAAD,KAAK,qBAAqB;QAExC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,OAAO,MAAM,uHAAA,CAAA,OAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QACxC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAC5D,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,mBAAmB;QACnB,MAAM,UAAU;YAAE,QAAQ,KAAK,GAAG,CAAC,QAAQ;YAAI,OAAO,KAAK,KAAK;QAAC;QACjE,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;YAAE,WAAW;QAAK;QAE9D,yCAAyC;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA,MAAM;gBACJ,IAAI,KAAK,GAAG,CAAC,QAAQ;gBACrB,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;YACjB;QACF;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF","debugId":null}}]
}