{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/utils/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\r\n\r\nexport const db =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: [\"query\", \"info\", \"warn\", \"error\"],\r\n  });\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = db;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;AAEC,MAAM,KACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;QAAS;QAAQ;QAAQ;KAAQ;AACzC;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/app/api/user/route.ts"],"sourcesContent":["import { db } from \"@/utils/db\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { hash } from \"bcrypt\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const body = await req.json();\r\n\r\n    const { email, username, password } = body;\r\n\r\n    if (!email || !username || !password) {\r\n      return NextResponse.json(\r\n        { user: null, message: \"Missing required fields\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // check if email already exists\r\n    const existingUserByEmail = await db.user.findUnique({\r\n      where: { email: email },\r\n    });\r\n    if (existingUserByEmail) {\r\n      return NextResponse.json(\r\n        { user: null, message: \"User with this email already exists\" },\r\n        { status: 409 }\r\n      );\r\n    }\r\n\r\n    // check if username already exists\r\n    const existingUserByUsername = await db.user.findUnique({\r\n      where: { username: username },\r\n    });\r\n    if (existingUserByUsername) {\r\n      return NextResponse.json(\r\n        { user: null, message: \"User with this username already exists\" },\r\n        { status: 409 }\r\n      );\r\n    }\r\n\r\n    // hash password\r\n    const hashedPassword = await hash(password, 10);\r\n\r\n    // create new user\r\n    const newUser = await db.user.create({\r\n      data: {\r\n        username,\r\n        email,\r\n        password: hashedPassword,\r\n      },\r\n    });\r\n\r\n    return NextResponse.json(\r\n      { user: newUser, message: \"User created successfully\" },\r\n      { status: 201 }\r\n    );\r\n  } catch (error: any) {\r\n    console.error(\"POST /api/user error:\", error);\r\n    return NextResponse.json(\r\n      { user: null, message: error?.message || \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG;QAEtC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,UAAU;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,MAAM;gBAAM,SAAS;YAA0B,GACjD;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,MAAM,sBAAsB,MAAM,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACnD,OAAO;gBAAE,OAAO;YAAM;QACxB;QACA,IAAI,qBAAqB;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,MAAM;gBAAM,SAAS;YAAsC,GAC7D;gBAAE,QAAQ;YAAI;QAElB;QAEA,mCAAmC;QACnC,MAAM,yBAAyB,MAAM,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACtD,OAAO;gBAAE,UAAU;YAAS;QAC9B;QACA,IAAI,wBAAwB;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,MAAM;gBAAM,SAAS;YAAyC,GAChE;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,CAAA,GAAA,qGAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAE5C,kBAAkB;QAClB,MAAM,UAAU,MAAM,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACnC,MAAM;gBACJ;gBACA;gBACA,UAAU;YACZ;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,MAAM;YAAS,SAAS;QAA4B,GACtD;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,MAAM;YAAM,SAAS,OAAO,WAAW;QAAwB,GACjE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}