{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/lib/prisma.ts"],"sourcesContent":["// lib/prisma.ts\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\ndeclare global {\r\n  // allow global prisma across hot reloads in dev\r\n  // eslint-disable-next-line no-var\r\n  var prisma: PrismaClient | undefined;\r\n}\r\n\r\nexport const prisma = global.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") global.prisma = prisma;\r\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAQO,MAAM,SAAS,OAAO,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEvD,wCAA2C,OAAO,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/app/api/auth/login/route.ts"],"sourcesContent":["// app/api/auth/login/route.ts\r\nimport { NextResponse } from \"next/server\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"change_this_in_prod\";\r\n\r\nexport async function POST(req: Request) {\r\n  try {\r\n    const { email, password } = await req.json();\r\n\r\n    if (!email || !password) {\r\n      return NextResponse.json({ error: \"Email and password required\" }, { status: 400 });\r\n    }\r\n\r\n    const user = await prisma.user.findUnique({ where: { email } });\r\n    if (!user) {\r\n      return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\r\n    }\r\n\r\n    const isValid = await bcrypt.compare(password, user.password);\r\n    if (!isValid) {\r\n      return NextResponse.json({ error: \"Invalid credentials\" }, { status: 401 });\r\n    }\r\n\r\n    // create JWT token\r\n    const payload = { userId: user.id, email: user.email };\r\n    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: \"1h\" });\r\n\r\n    // Return token in JSON (easy for Postman). In prod prefer httpOnly cookie.\r\n    return NextResponse.json({\r\n      token,\r\n      user: { id: user.id, email: user.email, name: name },\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;AACA;AACA;AACA;;;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA8B,GAAG;gBAAE,QAAQ;YAAI;QACnF;QAEA,MAAM,OAAO,MAAM,+GAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAC7D,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAC5D,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,mBAAmB;QACnB,MAAM,UAAU;YAAE,QAAQ,KAAK,EAAE;YAAE,OAAO,KAAK,KAAK;QAAC;QACrD,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;YAAE,WAAW;QAAK;QAE9D,2EAA2E;QAC3E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA,MAAM;gBAAE,IAAI,KAAK,EAAE;gBAAE,OAAO,KAAK,KAAK;gBAAE,MAAM;YAAK;QACrD;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF","debugId":null}}]
}