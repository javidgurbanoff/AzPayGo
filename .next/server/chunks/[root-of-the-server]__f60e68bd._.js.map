{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/utils/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nconst prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n \r\n\r\nexport const db = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIxB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEzD,wCAA2C,gBAAgB,MAAM,GAAG;AAG7D,MAAM,KAAK","debugId":null}},
    {"offset": {"line": 87, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/user/Desktop/AzPayGo/azpaygo/app/pages/api/user/route.ts"],"sourcesContent":["import {db} from \"@/utils/db\"\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport async function POST(req: Request){\r\n    try{\r\n     const body = await req.json()\r\n     const {email, username, password} = body\r\n     //check if email already exist\r\n     const existingUserByEmail = await db.user.findUnique({\r\n        where: {email: email}\r\n     });\r\n     if(existingUserByEmail){\r\n        return NextResponse.json({user: null, message: \"User with this email already exist\"}, {status: 409}  ) \r\n\r\n     }\r\n     //check if username already exist\r\n     const existingUserByUsername = await db.user.findUnique({\r\n        where: {username: username}\r\n     });\r\n     if(existingUserByUsername){\r\n        return NextResponse.json({user: null, message: \"User with this username already exist\"}, {status: 409}  ) \r\n\r\n     }\r\n\r\n     const newUser = db.user.create({\r\n        data:{\r\n            username,\r\n            email,\r\n            password\r\n        }\r\n     })\r\n     return NextResponse.json(body)\r\n    }catch (error){\r\n\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAY;IACnC,IAAG;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAC,GAAG;QACpC,8BAA8B;QAC9B,MAAM,sBAAsB,MAAM,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YAClD,OAAO;gBAAC,OAAO;YAAK;QACvB;QACA,IAAG,qBAAoB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAC,MAAM;gBAAM,SAAS;YAAoC,GAAG;gBAAC,QAAQ;YAAG;QAErG;QACA,iCAAiC;QACjC,MAAM,yBAAyB,MAAM,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACrD,OAAO;gBAAC,UAAU;YAAQ;QAC7B;QACA,IAAG,wBAAuB;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAC,MAAM;gBAAM,SAAS;YAAuC,GAAG;gBAAC,QAAQ;YAAG;QAExG;QAEA,MAAM,UAAU,6GAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YAC5B,MAAK;gBACD;gBACA;gBACA;YACJ;QACH;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC1B,EAAC,OAAO,OAAM,CAEd;AACJ","debugId":null}}]
}